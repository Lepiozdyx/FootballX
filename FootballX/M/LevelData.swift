//
//  LevelData.swift
//  FootballX
//
//  Created by Alex on 11.02.2025.
//

import Foundation

struct LevelData {
    static let levels: [Level] = [
        Level(id: 1, blockedCells: [
            (0, 0), (0, 6),
            (1, 0), (1, 2), (1, 9),
            (2, 0), (2, 4), (2, 10),
            (3, 6), (3, 10),
            (4, 2), (4, 4), (4, 6), (4, 7), (4, 9),
            (5, 2), (5, 6),
            (6, 0), (6, 3), (6, 9)
        ]),
        Level(id: 2, blockedCells: [
            (0, 3), (0, 6),
            (1, 2), (1, 6), (1, 7), (1, 10),
            (2, 4), (2, 10),
            (3, 6), (3, 4), (3, 8),
            (4, 0), (4, 1), (4, 3), (4, 7),
            (5, 2), (5, 4), (5, 6), (5, 9), (5, 10),
            (6, 3), (6, 9)
        ]),
        Level(id: 3, blockedCells: [
            (0, 3), (0, 4), (0, 10),
            (1, 5), (1, 8),
            (2, 1), (2, 3), (2, 7),
            (3, 4), (3, 8),
            (4, 1), (4, 2), (4, 6),
            (5, 1), (5, 3), (5, 7), (5, 9),
            (6, 4), (6, 6), (6, 9)
        ]),
        Level(id: 4, blockedCells: [
            (0, 3), (0, 8),
            (1, 1), (1, 7),
            (2, 0), (2, 2), (2, 5), (2, 9),
            (3, 7), (3, 10),
            (4, 2), (4, 3), (4, 7), (4, 10),
            (5, 0), (5, 5), (5, 7),
            (6, 0), (6, 3), (6, 7)
        ]),
        Level(id: 5, blockedCells: [
           (0, 4), (0, 9), (0, 10),
           (1, 0), (1, 2), (1, 5),
           (2, 4), (2, 8), (2, 10),
           (3, 2), (3, 6), (3, 9),
           (4, 1), (4, 5), (4, 8),
           (5, 3), (5, 6),
           (6, 2), (6, 5), (6, 9)
        ]),
        Level(id: 6, blockedCells: [
           (0, 3), (0, 7),
           (1, 3), (1, 5), (1, 10),
           (2, 1), (2, 6), (2, 8),
           (3, 1), (3, 3), (3, 7), (3, 10),
           (4, 5), (4, 7), (4, 10),
           (5, 1),
           (6, 2), (6, 5), (6, 7), (6, 8)
        ]),
        Level(id: 7, blockedCells: [
           (0, 2), (0, 4), (0, 8),
           (1, 0), (1, 3), (1, 8),
           (2, 1), (2, 4), (2, 6),
           (3, 8), (3, 9),
           (4, 3), (4, 5), (4, 7),
           (5, 1), (5, 9),
           (6, 1), (6, 4), (6, 6), (6, 8)
        ]),
        Level(id: 8, blockedCells: [
           (0, 1), (0, 6),
           (1, 4), (1, 7),
           (2, 3), (2, 5), (2, 6), (2, 9),
           (3, 2), (3, 7), (3, 10),
           (4, 0), (4, 4), (4, 6), (4, 9),
           (5, 3), (5, 7),
           (6, 1), (6, 4), (6, 9)
        ]),
        Level(id: 9, blockedCells: [
           (0, 0), (0, 3), (0, 7), (0, 10),
           (1, 5), (1, 8),
           (2, 1), (2, 4), (2, 6), (2, 8),
           (3, 0), (3, 10),
           (4, 0), (4, 3), (4, 5), (4, 7), (4, 10),
           (5, 2), (5, 7),
           (6, 0), (6, 5), (6, 8)
        ]),
        Level(id: 10, blockedCells: [
           (0, 0), (0, 5), (0, 8),
           (1, 2), (1, 3),
           (2, 1), (2, 4), (2, 6), (2, 9), (2, 10),
           (3, 2), (3, 4), (3, 6),
           (4, 0), (4, 2), (4, 5), (4, 8), (4, 10),
           (5, 1), (5, 10),
           (6, 0), (6, 3), (6, 6), (6, 9)
        ])
    ]
    
    static func getLevel(_ id: Int) -> Level {
        if id <= levels.count {
            return levels[id - 1]
        } else {
            let cycledIndex = (id - 1) % levels.count
            return levels[cycledIndex]
        }
    }
}
